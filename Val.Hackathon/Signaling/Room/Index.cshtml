@using Val.Hackathon.Signaling.Room
@using Microsoft.AspNetCore.Mvc.TagHelpers

@model RoomModel

@{
    Layout = "_Layout";
}

<div class="row">
    <div class="d-flex" style="flex: 1">
        @Model.Room
    </div>
    <div class="d-flex" id="timer" style="flex: 1">
        {{duration}}
    </div>
</div>

<link href="~/css/call.css" rel="stylesheet" />

<div class="row flex-column" style="height: calc(100% - 56px)">
    <div id="video-container" v-bind:class="videoSize">
        <div class="">
            <div id="main-video-container">
                <div class="local-user-thumbnail" v-show="!sharingScreen && !remoteSharingScreen">
                    @*<video id="local-video" :srcObject.prop="localStream" :ref="'local-video'" autoplay muted></video>*@
                    @*<div class="controls">
                        <div class="icons">{{displayName}}</div>
                    </div>*@
                </div>

                <div v-for="user in users" class="video-thumbnail" v-show="!sharingScreen && !remoteSharingScreen" :id="`remote-video-container-${user.userId}`" v-bind:key="user.userId">
                    <video autoplay :id="`remote-video-${user.userId}`" :ref="`remote-video-${user.userId}`"></video>
                    <div class="controls">
                        <div class="icons">{{user.displayName}}</div>
                    </div>
                </div>

                <div class="local-screen" v-show="sharingScreen">
                    <video id="screen-video" autoplay></video>
                </div>

                <div class="video-thumbnail remote-screen" v-show="remoteSharingScreen">
                    <video id="remote-screen-video" autoplay></video>
                </div>
            </div>
            <div class="header">
                @Model.Room
            </div>
        </div>
        <div id="agenda-container" class="agenda">
        </div>
    </div>
    <div class="col-md-3 col-sm-12 side-column" id="side-column" v-bind:class="chatSize">
        <div class="video-grid" id="video-grid">
            <video id="local-video" :srcObject.prop="localStream" :ref="'local-video'" playsinline autoplay muted></video>
        </div>
        <div class="chat-container" id="chat-container" role="tabpanel" aria-labelledby="nav-chat-tab">
            <div class="d-flex chat-header">
                Chat
            </div>

            <div id="chat-conversation">
                <div v-for="message in sortedMessages" :id="`message-${message.id}`" v-bind:class="{ 'local-message': message.type == 'local', 'remote-message': message.type == 'remote' }">
                    <div>
                        <span class="username">{{message.type == 'local' ? 'You' : message.from}}</span>
                        <span class="date">{{new Date(message.timestamp).toLocaleTimeString()}}:</span>
                        <span class="message">{{message.text}}</span>
                    </div>
                </div>
            </div>
            <div>
                <div class="chat-input">
                    <input type="text" class="form-control" id="new-message" placeholder="Send a message" />
                    <span id="send-message" class="material-icons">send</span>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="row fixed-bottom">
    <div class="d-flex justify-content-center" id="video-controls">
        <div id="mute-audio" class="icon" v-bind:class="{ 'icon-disabled': !audioEnabled }" v-on:click="muteAudio">
            <span class="material-icons">{{audioEnabled ? 'mic' : 'mic_off'}}</span>
        </div>
        <div id="mute-video" class="icon" v-bind:class="{ 'icon-disabled': !videoEnabled }" v-on:click="muteVideo">
            <span class="material-icons">{{videoEnabled ? 'videocam' : 'videocam_off'}}</span>
        </div>
        <div id="share-screen" class="icon" v-on:click="shareScreen">
            <span class="material-icons">{{sharingScreen ? 'desktop_access_disabled' : 'desktop_windows'}}</span>
        </div>
        @*<div id="open-chat" class="icon" v-on:click="toggleChat">
            <span class="material-icons">chat</span>
        </div>*@
        <div id="end-call" class="icon icon-disabled" v-on:click="endCall">
            <span class="material-icons">call_end</span>
        </div>
    </div>
</div>

<script type="text/javascript" src="~/lib/jquery/dist/jquery.min.js"></script>
<script type="text/javascript" src="~/lib/uuid/uuid.min.js"></script>
<script type="text/javascript" src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>
<script src="~/js/room/video.js" asp-append-version="true"></script>
<script type="text/javascript" src="~/js/room/chat.js"></script>

<script type="text/javascript">
    var room = '@Model.Room';
    var RTCPeerConnection = window.webkitRTCPeerConnection;
    var servers = { 'iceServers': [{ 'urls': 'stun:stun.services.mozilla.com' }, { 'urls': 'stun:stun.l.google.com:19302' }] };
    var peerConnections = {};
    var users = {};
    var currentUserId;
    var displayName;
    var localStream;
    var screenStream;
    //var peerConnection;
    var connection;
    var audioMuted = false;
    var videoMuted = false;
    var assemblyToken;
    var socket;
    var recorder;
    var video = {
        frameRate: {
            min: 15,
            ideal: 30,
            max: 60
        },
        width: {
            min: 720,
            ideal: 1280,
            max: 1920
        },
        height: {
            min: 480,
            ideal: 720,
            max: 1080
        },
        aspectRatio: {
            ideal: 1
        }
    }

    $(document).ready(function () {
        $.get('/api/assembly/token').then(async (response) => {
            var json = JSON.parse(response);
            assemblyToken = json.token;
            console.log(assemblyToken);

            socket = await new WebSocket(`wss://api.assemblyai.com/v2/realtime/ws?sample_rate=16000&token=${assemblyToken}`);

            // handle incoming messages to display transcription to the DOM
            const texts = {};
            socket.onmessage = (message) => {
                let msg = '';
                const res = JSON.parse(message.data);
                console.log(res);
                texts[res.audio_start] = res.text;
                const keys = Object.keys(texts);
                keys.sort((a, b) => a - b);
                for (const key of keys) {
                    if (texts[key]) {
                        msg += ` ${texts[key]}`;
                    }
                }

                console.log(msg);
            };

            socket.onerror = (event) => {
                console.error(event);
                socket.close();
            }

            socket.onclose = event => {
                console.log(event);
                socket = null;
            }

            socket.onopen = () => {
                // once socket is open, begin recording
                initializeMedia();
            };
        });

        window.addEventListener('beforeunload', (evt) => {
            console.info("Window unloading");

            var keys = Object.keys(peerConnections);

            if (keys && keys.length > 0) {
                keys.forEach((key, index) => {
                    var connection = peerConnections[key];

                    if (connection) {
                        connection.close();
                    }
                });
            }

            var model = {
                userId: currentUserId,
                room: room,
                displayName: displayName,
                connectionId: connection.id
            }

            $.post({
                url: `/room/${room}/leave`,
                contentType: 'application/json',
                data: JSON.stringify(model)
            }).then((response) => {
                console.log(response);
            }).fail((error) => {
                console.error(error);
            });
        })

        displayName = localStorage.getItem('displayName');
        videoGridModel._data.displayName = displayName;
        connection = new signalR.HubConnectionBuilder().withUrl("/meet").build();

        connection.on("NewMessage", function (model) {
            sidePanel.addMessage(model);
            /*console.log(`New Message: ${JSON.stringify(model)}`);
            var div = $('<div>');
            div.text(`${model.from} - ${new Date(model.timestamp).toLocaleTimeString()}: ${model.message}`);
            $('#chat-conversation').append(div);*/
        });

        connection.on("UserJoining", function (model) {
            var name = model.displayName;
            var userId = model.userId;

            videoGridModel.users.push(model);
            userModel.addUser(model);
            users[userId] = model;

            var peerConnection = initializePeerConnection(userId);

            peerConnection.createOffer().then(offer => {
                return peerConnection.setLocalDescription(offer);
            }).then(() => {
                var sdp = peerConnection.localDescription
                sendOffer(sdp, userId, 'camera');
            });

            if (videoControlsModel.sharingScreen) {
                var screenConnection = initializePeerConnection(userId, true);

                screenConnection.createOffer().then(offer => {
                    return screenConnection.setLocalDescription(offer);
                }).then(() => {
                    var sdp = screenConnection.localDescription
                    sendOffer(sdp, userId, 'screen');
                });
            }
        });

        connection.on("UserLeaving", function (model) {

        });

        connection.on("Offer", function (message) {
            var userId = message.sourceUserId;
            var mediaType = message.mediaType;
            var connectionId = userId;

            if (mediaType == 'screen') {
                connectionId = `${userId}-screen`;
            }

            var peerConnection = peerConnections[connectionId];

            var user = {
                userId: userId,
                displayName: message.displayName
            };

            users[userId] = user;
            videoGridModel.addUser(user);
            userModel.addUser(user);

            if (!peerConnection) {
                peerConnection = initializePeerConnection(userId, mediaType == 'screen');
            }

            peerConnection.setRemoteDescription(new RTCSessionDescription(JSON.parse(message.sdp)))
                .then(() => peerConnection.createAnswer())
                .then(answer => peerConnection.setLocalDescription(answer))
                .then(() => sendAnswer(peerConnection.localDescription, userId, mediaType));
        })

        connection.on('Answer', function (message) {
            var userId = message.sourceUserId;
            var mediaType = message.mediaType;
            var connectionId = userId;

            if (mediaType == 'screen') {
                connectionId = `${userId}-screen`;
            }

            var peerConnection = peerConnections[connectionId];
            peerConnection.setRemoteDescription(new RTCSessionDescription(JSON.parse(message.sdp)));
        })

        connection.on('IceCandidate', function (message) {
            var userId = message.sourceUserId;
            var mediaType = message.mediaType;
            var connectionId = userId;

            if (mediaType == 'screen') {
                connectionId = `${userId}-screen`;
            }

            var peerConnection = peerConnections[connectionId];

            if (!peerConnection.localDescription) {
                return;
            }

            peerConnection.addIceCandidate(JSON.parse(message.ice));
        });

        connection.start().then(function () {
            currentUserId = connection.connection.connectionId;
            sidePanel.init();

            console.log(`UserId: ${currentUserId}`);
                connection.invoke('JoinRoom', room).then(async function () {
                    
                }).catch (function (err) {
                console.error(err);
            });
        }).catch(function (err) {
            return console.error(err.toString());
        });

        $('#send-message').click(function () {
            sendMessage();
        });

        $('#new-message').keyup(function (e) {
            if (e.keyCode == 13) {
                sendMessage();
            }
        });
    });

    function sendMessage() {
        var message = $('#new-message').val();

        if (!message || message == '') {
            return;
        }

        var model = {
            id: uuid.v4(),
            text: message,
            from: displayName,
            fromUserId: currentUserId,
            timestamp: new Date().getTime(),
            room: room,
            type: 'remote'
        };

        $.post({
            url: `/room/${room}/chat`,
            contentType: 'application/json',
            data: JSON.stringify(model)
        }).then((response) => {
            model.type = 'local';
            console.log(response);
            sidePanel.addMessage(model);
        }).fail((error) => {
            console.log(error);
        });

        /*connection.invoke("SendMessage", model).then(function () {
            var div = $('<div>');
            div.text(`${model.from} - ${new Date(model.timestamp).toLocaleTimeString()}: ${model.message}`);
            $('#chat-conversation').append(div);
            $('#new-message').val('');
        }).catch (function (err) {
            return console.error(err.toString());
        });*/
    }

    function addScreenShareStream(stream) {
        var keys = Object.keys(peerConnections);
        keys.forEach(key => {
            var connection = peerConnections[key];
            connection.addStream(stream);
        });
    }

    function initializePeerConnection(userId, screen) {
        var peerConnection = new RTCPeerConnection(servers);
        var connectionId = userId;

        if (screen) {
            connectionId = `${connectionId}-screen`;
        }

        peerConnection.onicecandidate = function (event) {
            var candidate = event.candidate;
            var mediaType = screen == true ? 'screen' : 'camera';
            sendIceCandidate(candidate, userId, mediaType);
        };

        peerConnection.onaddstream = function (event) {
            var vueUser = videoGridModel.users.find(x => x.userId == userId);

            if (vueUser) {
                if (screen) {
                    vueUser.screenStream = event.stream;
                    $('#remote-screen-video')[0].srcObject = event.stream;
                } else {
                    vueUser.stream = event.stream;
                    //userModel.setUserStream(userId, event.stream);
                    videoGridModel.setUserStream(userId, event.stream);
                    //$(`#remote-video-${userId}`)[0].srcObject = event.stream;
                }
            }
        }

        peerConnection.onconnectionstatechange = function (event) {
            console.log(peerConnection.connectionState);

            switch (peerConnection.connectionState) {
                case "connected":
                    if (screen && !videoGridModel.sharingScreen) {
                        videoGridModel.remoteSharingScreen = true;
                    }

                    break;
                case "disconnected":
                    if (!screen) {
                        videoGridModel.removeUser(userId);
                        userModel.removeUser(userId);
                    } else {
                        videoGridModel.remoteSharingScreen = false;
                    }

                    console.log(`User Disconnecting: UserId=${userId}, Screen=${screen}`);
                    break;
                case "failed":
                case "closed":
                    break;
                    //$(`#remote-video-${userId}`).remove();
                    
            }
        }

        if (!screen) {
            peerConnection.addStream(localStream);
        }

        peerConnections[connectionId] = peerConnection;

        var user = videoGridModel.users.find(x => x.userId == userId);

        if (user) {
            if (!screen) {
                user.peerConnection = peerConnection;
            } else {
                user.screenConnection = peerConnection;
            }
        }

        return peerConnection;
    }

    function initializeMedia() {
        var videoInputId = localStorage.getItem('videoInput');
        var audioOutputId = localStorage.getItem('audioOutput');
        var audio = true;

        if (videoInputId) {
            video.deviceId = videoInputId;
        }

        if (audioOutputId) {
            audio = {
                deviceId: audioOutputId
            }
        }

        navigator.mediaDevices.getUserMedia({
            audio: true,
            video: false
        }).then(function (stream) {
            //$('#local-video')[0].srcObject = stream;
            $('#local-video')[0].volume = 0;
            localStream = stream;
            sidePanel.setLocalStream(stream);

            var model = {
                room: room,
                userId: currentUserId,
                displayName: localStorage.getItem('displayName')
            };

            connection.invoke('UserJoining', model).catch(function (err) {
                console.error(err);
            });

            recorder = new RecordRTC(stream, {
                type: 'audio',
                mimeType: 'audio/webm;codecs=pcm', // endpoint requires 16bit PCM audio
                recorderType: StereoAudioRecorder,
                timeSlice: 1000, // set 250 ms intervals of data that sends to AAI
                desiredSampRate: 16000,
                numberOfAudioChannels: 1, // real-time requires only one channel
                bufferSize: 4096,
                audioBitsPerSecond: 128000,
                ondataavailable: (blob) => {
                    const reader = new FileReader();
                    reader.onload = () => {
                        const base64data = reader.result;

                        // audio data must be sent as a base64 encoded string
                        if (socket) {
                            var json =JSON.stringify({ audio_data: base64data.split('base64,')[1] });
                            socket.send(json);
                        }
                    };
                    reader.readAsDataURL(blob);
                },
            });

            recorder.startRecording();
        });
    }

    function sendOffer(offer, userId, mediaType) {
        var message = {
            userId: userId,
            sourceUserId: currentUserId,
            displayName: displayName,
            room: room,
            mediaType: mediaType,
            sdp: JSON.stringify(offer)
        };

        connection.invoke("SendOffer", message).catch(function (err) {
            return console.error(err.toString());
        });
    }

    function sendAnswer(answer, userId, mediaType) {
        var message = {
            userId: userId,
            sourceUserId: currentUserId,
            room: room,
            mediaType: mediaType,
            sdp: JSON.stringify(answer)
        };

        connection.invoke("SendAnswer", message).catch(function (err) {
            return console.error(err.toString());
        });
    }

    function sendIceCandidate(iceCandidate, userId, mediaType) {
        var message = {
            userId: userId,
            sourceUserId: currentUserId,
            room: room,
            mediaType: mediaType,
            ice: JSON.stringify(iceCandidate)
        };

        connection.invoke("SendIceCandidate", message).catch(function (err) {
            return console.error(err.toString());
        });
    }
</script>